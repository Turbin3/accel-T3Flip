/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedInitializeInstruction } from '../instructions';

export const T3_FLIP_PROGRAM_ADDRESS =
  '69o8VmZ1BHLA7KvJnftprn9X4CkykUant7iQ9jYEMXzX' as Address<'69o8VmZ1BHLA7KvJnftprn9X4CkykUant7iQ9jYEMXzX'>;

export enum T3FlipInstruction {
  Initialize,
}

export function identifyT3FlipInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): T3FlipInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return T3FlipInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a t3Flip instruction.'
  );
}

export type ParsedT3FlipInstruction<
  TProgram extends string = '69o8VmZ1BHLA7KvJnftprn9X4CkykUant7iQ9jYEMXzX',
> = {
  instructionType: T3FlipInstruction.Initialize;
} & ParsedInitializeInstruction<TProgram>;
