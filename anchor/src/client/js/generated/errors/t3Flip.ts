/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { T3_FLIP_PROGRAM_ADDRESS } from '../programs';

/** CustomError: Custom error message */
export const T3_FLIP_ERROR__CUSTOM_ERROR = 0x1770; // 6000

export type T3FlipError = typeof T3_FLIP_ERROR__CUSTOM_ERROR;

let t3FlipErrorMessages: Record<T3FlipError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  t3FlipErrorMessages = {
    [T3_FLIP_ERROR__CUSTOM_ERROR]: `Custom error message`,
  };
}

export function getT3FlipErrorMessage(code: T3FlipError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (t3FlipErrorMessages as Record<T3FlipError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isT3FlipError<TProgramErrorCode extends T3FlipError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    T3_FLIP_PROGRAM_ADDRESS,
    code
  );
}
